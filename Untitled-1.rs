extern crate reqwest;
extern crate url;

use reqwest::blocking::Client;
use reqwest::redirect::Policy;
use url::Url;

fn main() {
    let target_url = "https://example.com";
    let client = Client::builder()
        .redirect(Policy::none())
        .build()
        .expect("Error creating HTTP client");

    match check_url(&client, target_url) {
        Ok(is_secure) => {
            if is_secure {
                println!("The URL {} is secure.", target_url);
            } else {
                println!("The URL {} may be vulnerable.", target_url);
            }
        }
        Err(err) => {
            eprintln!("Error checking URL {}: {}", target_url, err);
        }
    }
}

fn check_url(client: &Client, url_str: &str) -> Result<bool, reqwest::Error> {
    let parsed_url = Url::parse(url_str)?;

    let response = client.get(parsed_url.as_str()).send()?;

    if let Some(redirect_url) = response.url().as_str().checked_sub(parsed_url.as_str()) {
        println!("The URL was redirected to: {}", redirect_url);
        return Ok(false);
    }

    if parsed_url.scheme() != "https" {
        return Ok(false);
    }

    let cert_valid = response
        .tls()
        .and_then(|info| info.peer_certificate())
        .map_or(false, |cert| cert.verify().is_ok());

    Ok(cert_valid)
}
